export {}
declare global {
  // Extending the Array constructor
  interface ArrayConstructor {
    /**
     * Creates an array of the specified length filled with values generated by the getValue function.
     * @param count The number of elements to create.
     * @param getValue A function that generates values for the array; it takes the index as an argument.
     * @returns An array of generated values.
     */
    times<T>(count: number, getValue?: (index: number) => T): T[];
  }

  // Extending the Array prototype
  interface Array<T> {
    /**
     * Splits the array into chunks of the specified size.
     * @param chunkSize The size of each chunk.
     * @returns An array of chunks.
     */
    chunk(chunkSize: number): T[][];

    /**
     * Converts the array to a JSON string.
     * @returns A JSON string representation of the array.
     */
    toJson(): string;

    /**
     * Returns the last element of the array.
     * @returns The last element of the array.
     */
    last(): T;

    /**
     * Filters the array to contain only unique elements.
     * @returns An array of unique elements.
     */
    unique(): T[];
  }

  interface Array<T extends number> {
    /**
     * Calculates the minimum value in the number array.
     * @returns The smallest number in the array.
     */
    min(): number;

    /**
     * Calculates the maximum value in the number array.
     * @returns The largest number in the array.
     */
    max(): number;

    /**
     * Calculates the sum of all numbers in the array.
     * @returns The sum of all the numbers.
     */
    sum(): number;
  }

  // Extending the String prototype
  interface String {
    /**
     * Splits the string into chunks of the specified size.
     * @param chunkSize The size of each chunk.
     * @returns An array of string chunks.
     */
    chunk(chunkSize: number): string[];
  }
}
